apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-server
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app: ingress-server
  template:
    metadata:
      labels:
        app: ingress-server
    spec:
      securityContext:
        {{- toYaml .Values.securityContext.pod | nindent 8 }}
      volumes:
        - name: ingress-server-tmp
          emptyDir: {}
      containers:
        - name: ingress-server
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: {{ .Values.service.internalPort.name | quote }}
              containerPort: {{ .Values.service.internalPort.number | int }}
          env:
            - name: S3_ACCESS_KEY
              value: {{ .Values.deployment.secrets.s3.accessKey | quote }}
            - name: S3_SECRET_KEY
              value: {{ .Values.deployment.secrets.s3.secretKey | quote }}
            - name: USERS_JSON
              value: {{ .Values.deployment.secrets.basicAuth.usersJson | quote }}
          volumeMounts:
            - name: ingress-server-tmp
              mountPath: /tmp
          startupProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 72
          livenessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
          securityContext:
            {{- toYaml .Values.securityContext.container | nindent 12 }}
