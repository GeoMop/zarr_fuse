name: Ingress server - reusable workflow
on:
  workflow_call:
    inputs:
      deploy:
        description: Whether to deploy the Helm chart
        required: false
        type: boolean
        default: false
      tag:
        description: The tag to use for the container image
        required: false
        type: string
        default: generate
      namespace:
        description: The Kubernetes namespace to use
        required: true
        type: string
      release-name:
        description: The Helm release name to use
        required: true
        type: string
      s3-store-url:
        description: The S3 store URL (e.g., s3://bucket-name/path/to/store.zarr)
        required: true
        type: string
      docker-repository:
        description: The Docker repository to use
        required: false
        type: string
        default: jbrezmorf/zarr-fuse-ingress-server
      docker-registry:
        description: The Docker registry to use
        required: false
        type: string
        default: docker.io
      configuration-dir-path:
        description: Path to the directory containing configuration files
        required: false
        type: string
        default: app/databuk/ingress_server/src/inputs
jobs:
  get-version-tag:
    name: Get version tag
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.get_version_tag.outputs.version_tag }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref_name }}-get-version-tag
      cancel-in-progress: true
    steps:
      - name: Get version tag
        id: get_version_tag
        run: |
          if [[ ${{ inputs.tag }} == "generate" ]]; then
            echo "version_tag=ci-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            echo "version_tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          fi
  pre-containerize:
    name: Prepare for containerization
    runs-on: ubuntu-latest
    if: ${{ inputs.configuration-dir-path != '' }}
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref_name }}-pre-containerize"
      cancel-in-progress: true
    steps:
      - name: Checkout caller repository
        uses: actions/checkout@v4

      - name: Copy configuration files
        run: |
          if [ ! -d "inputs" ]; then
            mkdir -p inputs
          else
            rm -rf inputs/*
          fi

          cp -r ${{ inputs.configuration-dir-path}}/* inputs/

      - name: Upload configuration files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ingress-server-configuration
          path: inputs/
  containerize:
    name: Containerize ingress server
    runs-on: ubuntu-latest
    needs:
      - get-version-tag
      - pre-containerize
    container:
      image: quay.io/buildah/stable:v1.35.4
      options: --privileged
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref_name }}-containerize"
      cancel-in-progress: true
    steps:
      - name: Checkout zarr_fuse
        uses: actions/checkout@v4
        with:
          repository: GeoMop/zarr_fuse

      - name: Download configuration files artifact
        if: ${{ inputs.configuration-dir-path != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ingress-server-configuration
          path: app/databuk/ingress_server/src/inputs/

      - name: Containerize
        uses: ./.github/actions/containerize
        with:
          repository: ${{ inputs.docker-repository }}
          registry: ${{ inputs.docker-registry }}
          tag: ${{ needs.get-version-tag.outputs.version-tag }}
          containerfile-path: oci/Containerfile
          push: true
          registry-username: ${{ vars.DOCKER_USERNAME }}
          registry-password: ${{ secrets.DOCKER_PASSWORD }}
          working-directory: app/databuk/ingress_server
          extra-build-args: --build-arg APP_VERSION="${{ needs.get-version-tag.outputs.version-tag }}"
  lint-helm-chart:
    name: Lint ingress server Helm chart
    runs-on: ubuntu-latest
    container:
      image: docker.io/alpine/k8s:1.29.14
    needs:
      - containerize
    defaults:
      run:
        working-directory: app/databuk/ingress_server/charts/ingress-server
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref_name }}-lint-helm-chart"
      cancel-in-progress: true
    steps:
      - name: Checkout zarr_fuse
        uses: actions/checkout@v4
        with:
          repository: GeoMop/zarr_fuse
      - name: Lint helm chart
        uses: ./.github/actions/helm-lint
        with:
          working-directory: app/databuk/ingress_server/charts/ingress-server
          values: --values values/minimal-required-values.yaml
  deploy:
    name: Deploy ingress server to e-infra rancher
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy }}
    container:
      image: docker.io/alpine/k8s:1.29.14
    needs:
      - lint-helm-chart
      - get-version-tag
    env:
      KUBECONFIG: ./kubeconfig.yaml
    defaults:
      run:
        working-directory: app/databuk/ingress_server/charts
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref_name }}-deploy"
      cancel-in-progress: false
    steps:
      - name: Checkout zarr_fuse
        uses: actions/checkout@v4
        with:
          repository: GeoMop/zarr_fuse
      - name: Decode kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig.yaml && chmod 600 kubeconfig.yaml
      - name: Set context
        run: kubectl config set-context --current --namespace="${{ inputs.namespace }}"
      - name: Deploy app
        run: |
          helm upgrade ${{ inputs.release-name }} ingress-server \
          --install --atomic --timeout 10m --namespace "${{ inputs.namespace }}" \
          --set image.tag="${{ needs.get-version-tag.outputs.version-tag }}" \
          --set deployment.secrets.s3.accessKey="${{ secrets.S3_ACCESS_KEY }}" \
          --set deployment.secrets.s3.secretKey="${{ secrets.S3_SECRET_KEY }}" \
          --set deployment.secrets.s3.endpointUrl="${{ vars.S3_ENDPOINT_URL }}" \
          --set deployment.secrets.s3.storeUrl='${{ inputs.s3-store-url }}' \
          --set-json deployment.secrets.basicAuth.usersJson='${{ secrets.BASIC_AUTH_USERS_JSON }}' \
          --set app.name="${{ inputs.release-name }}"
